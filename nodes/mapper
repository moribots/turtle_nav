#!/usr/bin/env python
"""
DESCRIPTION: This node uses the move_base action server to send 2D Nav Goals
             to the turtlebot3 simulated in Gazebo, in order to map
             the world: turtlebot3_house. The strategy is as follows:

             First, the map data is collected from the /map topic using the
             callback_map function. A random coordinate on the map is then
             chosen, satisfying three criteria: the coordinate must be
             un-obstructed, it must have at least one neighbouring cell
             (including diagonals) that is unmapped (cell value of -1),
             and can have no more than one neighbour cell be an obstacle.

             Upon finding a map coordinate which satisfies these criteria,
             a 2D Nav Goal is sent to the move_base action server to command
             the turtlebot3 to move to that point. The gmapping node will
             cause the turtlebot3 to map the environment as it moves. The
             next 2D Nav Goal is given when a terminal status is returned from
             the move_base action server (goal reached, goal aborted, etc).


SUBSCRIBERS: This node subscribed to the /map topic to read the map data of
             OccupancyGrid message type, which is row-major ordered and
             originated at (-10,-10) in world coordinates.

ACTION LIBS: The actionlib is used to create a SimpleActionClient 'move_base'
             with a message type MoveBaseAction. The .send_goal method
             is called to send a PoseStamped message through a MoveBaseGoal
             message. The client's status type upon termination is also used
             to determine when to send new goals.

REFERENCE: https://hotblackrobotics.github.io/en/blog/2018/01/29/seq-goals-py/
"""

from __future__ import division
import rospy
# import numpy as np
from random import randrange
import actionlib
# from actionlib_msgs.msg import GoalStatus
# from geometry_msgs.msg import PoseStamped
# from gazebo_msgs.msg import LinkStates
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from nav_msgs.msg import OccupancyGrid
# from sensor_msgs.msg import LaserScan


class AutoMapLib():
    def __init__(self):

        rospy.init_node('mapper', anonymous=True)
        # counter to init next 2D nav goal
        self.completion = 0
        # Initialise goal pose variables
        self.x = 0
        self.y = 0
        # Create action client
        self.client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        # Wait for action server
        rospy.loginfo("Waiting for move_base action server...")
        wait = self.client.wait_for_server(rospy.Duration(5.0))
        if not wait:
            rospy.logerr("Action server unresponsive!")
            rospy.signal_shutdown("Action server unresponsive!")
            return
        rospy.loginfo("Connected to move_base action server!")
        # callback from /map topic
        self.sub = rospy.Subscriber('/map', OccupancyGrid, self.callback_map)

    def callback_map(self, map_data):
        """ Read the map data from the gmapping node, which
            publishes this data to the /map topic

            Args: map_data
        """
        try:
            self.automap(map_data)
            # log input data as debug-level message
            rospy.logdebug(map)
        except rospy.ROSInterruptException:
            pass

    def check_neighbours(self, map_data, index):
        """ Checks neighbours of randomly selected
            map index to see if they satisfy the criteria:
            At least one neighbour must be unknown (val=-1)
            No more than one neighbour may be an obstacle

            Args: map_data, index

            Returns: Boolean (T,F)
        """
        # Check neighbours ins 3x3 box around index
        # make sure there is at least one -1 cell and
        # less than two cells above 0.65
        unknowns = 0
        obstacles = 0
        # Note to convert from row,col to row-major order
        # row = row*numcols + col
        row_incr = 0
        numcols = 384

        for x in range(-3, 4):
                for y in range(-3, 4):
                    row_incr = x * numcols + y
                    try:
                        # Check for unknown cell (indicated edge of known map)
                        if map_data.data[index + row_incr] == -1:
                            unknowns += 1
                        # Check for obstacle cell
                        elif map_data.data[index + row_incr] > 0.65:
                            obstacles += 1
                    # Pass if index out of range of 384x384
                    except IndexError:
                        pass
        if unknowns > 0 and obstacles < 2:
            return True
        else:
            return False

    def automap(self, map_data):
        """ Selects a random map_data index and checks
            whether it is a free cell. If that is true,
            and its 3x3 proximity neihbours satisfy the
            condition: at least one unknown cell, and at
            most one obstacle cell, the corresponding
            world coordinate for this index is stored
            and the move_base_client method is called.

            Args: map_data

            Returns: x,y coordinate for 2D Nav Goal
        """
        valid = False

        while valid is False:
            # randomly select cell in map
            index = randrange(len(map_data.data))
            check = map_data.data[index]
            # Check that cell is not unknown or blocked
            # Also check that point near edge of known map
            edge = self.check_neighbours(map_data, index)
            if check != -1 and check <= 0.196 and edge is True:
                valid = True
        # index is in row-major order, convert to row,col
        # 384 is the number of columns
        numcol = 384
        row = index / numcol
        col = index % numcol

        # State resolution from map.yaml
        resolution = 0.05
        # we know each cell maps to resolution [m]
        # we know the origin is -10,-10 (Left Bottom of map)
        origin_x = -10
        origin_y = -10
        self.x = origin_x + col * resolution
        self.y = origin_y + row * resolution

        coord = [self.x, self.y]
        # log chosen coord
        rospy.logdebug(coord)

        # If completion counter is even, set 2D nav goal
        if self.completion % 2 == 0:
            # make completion counter odd
            # will become even when goal is reached
            self.completion += 1
            self.movebase_client()

    def movebase_client(self):
        """ Calls the .send_goal method from
            actionlib.SimpleActionClient to set a
            2D Nav Goal as a MoveBaseGoal message
            with a PoseStamped sub-message.

            Args: self (x,y goal position)

            Returns: Terminal output
        """
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose.position.x = self.x
        goal.target_pose.pose.position.y = self.y
        goal.target_pose.pose.orientation.w = 1.0
        rospy.loginfo("Sending goal pose [{}, {}]".format(self.x, self.y))
        self.client.send_goal(goal, self.goal_status)

    def goal_status(self, status, result):
        """ Reads the terminal status of the client
            and prints a corresponding message to the terminal.
            Additionally, increments completion counter to
            signal new 2D Nav Goal generation.

            Args: status, result (unused but required arg)

            Returns: counter increment and terminal output
        """
        # Increment counter for any terminal status to avoid getting stuck
        self.completion += 1
        # Terminal status values: http://docs.ros.org/diamondback/api/actionlib_msgs/html/msg/GoalStatus.html

        # Goal completed!
        if status == 3:
            rospy.loginfo("Goal pose reached!")

        # Goal Aborted (incomplete information, e.g no orientation)
        if status == 4:
            rospy.loginfo("Goal aborted by Action Server.")
            # rospy.signal_shutdown("Goal aborted, shutting down!")
            # return

        # Goal rejected (intersects obstacle)
        if status == 5:
            rospy.loginfo("Goal rejected by Action Server.")
            # rospy.signal_shutdown("Goal rejected, shutting down!")
            # return


def main():
    """ The main() function. """
    automap = AutoMapLib()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass