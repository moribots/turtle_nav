#!/usr/bin/env python
"""
DESCRIPTION:


SUBSCRIBERS:

SERVICES:

REFERENCE: https://hotblackrobotics.github.io/en/blog/2018/01/29/seq-goals-py/
"""

from __future__ import division
import rospy
# import numpy as np
from random import randrange
import actionlib
# from actionlib_msgs.msg import GoalStatus
# from geometry_msgs.msg import PoseStamped
# from gazebo_msgs.msg import LinkStates
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from nav_msgs.msg import OccupancyGrid
# from sensor_msgs.msg import LaserScan


class AutoMapLib():
    def __init__(self):

        rospy.init_node('mapper', anonymous=True)
        # counter to init next 2D nav goal
        self.completion = 0
        # Initialise goal pose variables
        self.x = 0
        self.y = 0
        # Create action client
        self.client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        rospy.loginfo("Waiting for move_base action server...")
        wait = self.client.wait_for_server(rospy.Duration(5.0))
        if not wait:
            rospy.logerr("Action server unresponsive!")
            rospy.signal_shutdown("Action server unresponsive!")
            return
        rospy.loginfo("Connected to move_base action server!")
        # callback from /map topic
        self.sub = rospy.Subscriber('/map', OccupancyGrid, self.callback_map)

    def callback_map(self, map_data):
        """ DESCRIPTION

            Args:
        """
        try:
            self.automap(map_data)
            # log input data as debug-level message
            # rospy.logdebug(map)
        except rospy.ROSInterruptException:
            pass

    def check_neighbours(self, map_data, index):
        # Check neighbours ins 3x3 box around index
        # make sure there is at least one -1 cell and
        # less than two cells above 0.65
        unknowns = 0
        obstacles = 0
        # Note to convert from row,col to row-major order
        # row = row*numcols + col
        row_incr = 0
        numcols = 384

        for x in range(-3, 4):
                for y in range(-3, 4):
                    row_incr = x * numcols + y
                    # Pass if index out of range of 384x384
                    try:
                        # Check for unknown cell (indicated edge of known map)
                        if map_data.data[index + row_incr] == -1:
                            unknowns += 1
                        # Check for obstacle cell
                        elif map_data.data[index + row_incr] > 0.65:
                            obstacles += 1
                    except IndexError:
                        pass
        if unknowns > 0 and obstacles < 2:
            return True
        else:
            return False

    def automap(self, map_data):
        """ DESCRIPTION

            Args:
        """
        valid = False

        while valid is False:
            # randomly select cell in map
            index = randrange(len(map_data.data))
            check = map_data.data[index]
            # Check that cell is not unknown or blocked
            # Also check that point near edge of known map
            edge = self.check_neighbours(map_data, index)
            if check != -1 and check <= 0.196 and edge is True:
                valid = True
        # index is in row-major order, convert to row,col
        # 384 is the number of columns
        numcol = 384
        row = index / numcol
        col = index % numcol

        # State resolution from map.yaml
        resolution = 0.05
        # we know each cell maps to resolution [m]
        # we know the origin is -10,-10 (Left Bottom of map)
        origin_x = -10
        origin_y = -10
        self.x = origin_x + col * resolution
        self.y = origin_y + row * resolution

        coord = [self.x, self.y]
        # log chosen coord
        rospy.logdebug(coord)

        # If completion counter is even, set 2D nav goal
        if self.completion % 2 == 0:
            # make completion counter odd
            # will become even when goal is reached
            self.completion += 1
            self.movebase_client()

    def goal_status(self, status, result):
        """DESCRIPTION

            Args:

            Returns:
        """
        # Increment counter for any terminal status to avoid getting stuck
        self.completion += 1
        # Terminal status values: http://docs.ros.org/diamondback/api/actionlib_msgs/html/msg/GoalStatus.html

        # Goal completed!
        if status == 3:
            rospy.loginfo("Goal pose reached!")

        # Cancelled Goal post-exec
        if status == 2:
            rospy.loginfo(
                "Goal cancelled via request post execution, completed execution."
            )

        # Goal Aborted (incomplete information, e.g no orientation)
        if status == 4:
            rospy.loginfo("Goal aborted by Action Server.")
            # rospy.signal_shutdown("Goal aborted, shutting down!")
            return

        # Goal rejected (intersects obstacle)
        if status == 5:
            rospy.loginfo("Goal rejected by Action Server.")
            # rospy.signal_shutdown("Goal rejected, shutting down!")
            return

        # Cancelled Goal pre-exec
        if status == 8:
            rospy.loginfo(
                "Goal cancelled via request prior to execution, succesfully cancelled."
            )

    def movebase_client(self):
        """DESCRIPTION

            Args:

            Returns:
        """
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose.position.x = self.x
        goal.target_pose.pose.position.y = self.y
        goal.target_pose.pose.orientation.w = 1.0
        rospy.loginfo("Sending goal pose [{}, {}]".format(self.x, self.y))
        self.client.send_goal(goal, self.goal_status)


def main():
    """ The main() function. """
    # Initialise node
    automap = AutoMapLib()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass